generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topico {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  temas     Tema[]

  @@map("topicos")
}

model Tema {
  id        Int      @id @default(autoincrement())
  titulo    String
  topicoId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topico    Topico   @relation(fields: [topicoId], references: [id], onDelete: Cascade)

  @@map("temas")
}

model Configuracao {
  id        Int      @id @default(autoincrement())
  chave     String   @unique
  nome      String
  descricao String
  categoria String
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  valor     String

  @@map("configuracoes")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String?
  name       String
  role       UserRole     @default(GENERAL)
  active     Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  provider   AuthProvider @default(CREDENTIALS)
  providerId String?      @unique
  language   String      @default("pt-BR")
  // Quotas individuais (créditos disponíveis) - iniciam em zero
  quotaTemas           Int @default(0) // Geração de sugestões de temas por tópico
  quotaRoteiros        Int @default(0) // Geração de roteiro a partir de sugestão
  quotaNarracoes       Int @default(0) // Geração de áudio final
  quotaTemasCarrossel  Int @default(0) // Geração de sugestões de temas de carrossel
  quotaCarrossel       Int @default(0) // Geração de carrossel a partir de sugestão

  // Colunas legadas (manter temporariamente para evitar perda de dados)
  carouselLimit    Int?
  carouselUsed     Int?
  narrationLimit   Int?
  narrationUsed    Int?
  suggestionLimit  Int?
  suggestionUsed   Int?
  topicLimit       Int?
  topicUsed        Int?

  // Relacionamentos com dados do usuário
  refreshTokens RefreshToken[]
  topicos       UserTopico[]
  configuracoes UserConfiguracao[]
  narracoes     UserNarracao[]
  roteiros      UserRoteiro[]
  carrosseis    UserCarrossel[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  tokenHash String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@map("refresh_tokens")
}

enum UserRole {
  ADMIN
  GENERAL
}

enum AuthProvider {
  CREDENTIALS
  GOOGLE
}

// Novos modelos para dados relacionais por usuário
model UserTopico {
  id        Int      @id @default(autoincrement())
  nome      String
  descricao String?
  ativo     Boolean  @default(true)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  temas     UserTema[]
  temasCarrossel UserTemaCarrossel[]

  @@unique([userId, nome])
  @@map("user_topicos")
}

model UserTema {
  id          Int        @id @default(autoincrement())
  titulo      String
  userTopicoId Int
  userTopico  UserTopico @relation(fields: [userTopicoId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("user_temas")
}

model UserConfiguracao {
  id        Int      @id @default(autoincrement())
  chave     String
  nome      String
  descricao String
  categoria String
  valor     String
  ativo     Boolean  @default(true)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chave])
  @@map("user_configuracoes")
}

model UserNarracao {
  id          Int      @id @default(autoincrement())
  nome        String
  texto       String
  audioPath   String?  // Caminho para o arquivo de áudio
  ativo       Boolean  @default(true)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_narracoes")
}

model UserRoteiro {
  id          Int      @id @default(autoincrement())
  tema        String
  duracao     Int
  conteudo    String   // JSON do roteiro
  ativo       Boolean  @default(true)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_roteiros")
}

model UserCarrossel {
  id          Int      @id @default(autoincrement())
  tema        String
  quantidade  Int      // Número de slides (máximo 8)
  conteudo    String   // JSON do carrossel
  ativo       Boolean  @default(true)
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_carrosseis")
}

model UserTemaCarrossel {
  id          Int        @id @default(autoincrement())
  titulo      String
  userTopicoId Int
  userTopico  UserTopico @relation(fields: [userTopicoId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("user_temas_carrossel")
}

