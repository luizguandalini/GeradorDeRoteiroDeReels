generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topico {
  id        Int      @id @default(autoincrement())
  nome      String   @unique
  descricao String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  temas     Tema[]

  @@map("topicos")
}

model Tema {
  id        Int      @id @default(autoincrement())
  titulo    String
  topicoId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topico    Topico   @relation(fields: [topicoId], references: [id], onDelete: Cascade)

  @@map("temas")
}

model Configuracao {
  id        Int      @id @default(autoincrement())
  chave     String   @unique
  nome      String
  descricao String
  categoria String
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  valor     String

  @@map("configuracoes")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String?
  name       String
  role       UserRole     @default(GENERAL)
  active     Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  provider   AuthProvider @default(CREDENTIALS)
  providerId String?      @unique
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  tokenHash String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@map("refresh_tokens")
}

enum UserRole {
  ADMIN
  GENERAL
}

enum AuthProvider {
  CREDENTIALS
  GOOGLE
}
